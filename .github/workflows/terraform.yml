name: 'Terraform'

on:
  push:
    branches:
      - main
  pull_request:

env:
  TF_VER: 1.3.9

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: $TF_VER

    - name: Terraform Format
      id: fmt
      run: terraform fmt -recursive
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: for dir in $(find */ -type d -exec test -e "{}"/main.tf \; -print); do echo $dir && terraform -chdir=$dir init >/dev/null && echo -e "\033[0;32mTerraform has been successfully initialized! \033[0m\n"; done

    - name: Terraform validate
      id: validate
      run: for dir in $(find */ -type d -exec test -e "{}"/main.tf \; -print); do echo $dir && terraform -chdir=$dir validate; done

    - uses: EndBug/add-and-commit@v9
      with:
        message: Show GitHub Actions logo
        committer_name: GitHub Actions
        committer_email: actions@github.com
        add: '.'
    
#    - uses: actions/github-script@v6
#      if: github.event_name == 'pull_request'
#      with:
#        github-token: ${{ secrets.GITHUB_TOKEN }}
#        script: |
#          // 1. Retrieve existing bot comments for the PR
#          const { data: comments } = await github.rest.issues.listComments({
#            owner: context.repo.owner,
#            repo: context.repo.repo,
#            issue_number: context.issue.number,
#          })
#          const botComment = comments.find(comment => {
#            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
#          })
#    
#          // 2. Prepare format of the comment
#          const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
#
#          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
#
#          // 3. If we have a comment, update it, otherwise create a new one
#          if (botComment) {
#            github.rest.issues.updateComment({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              comment_id: botComment.id,
#              body: output
#            })
#          } else {
#            github.rest.issues.createComment({
#              issue_number: context.issue.number,
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              body: output
#            })
#          }
